(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{406:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"优化手段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优化手段"}},[t._v("#")]),t._v(" 优化手段")]),t._v(" "),s("h3",{attrs:{id:"懒加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#懒加载"}},[t._v("#")]),t._v(" 懒加载")]),t._v(" "),s("p",[t._v("懒加载是性能优化的前头兵。什么叫懒加载呢？懒加载是指在长页面加载过程时，先加载关键内容，延迟加载非关键内容。比如当我们打开一个页面，它的内容超过了浏览器的可视窗口大小，我们可以先加载前端的可视区域内容，剩下的内容等它进入可视区域后再按需加载。")]),t._v(" "),s("p",[t._v("另外，我在上一讲诊断清单部分已经提到过，如果首屏只需要几条数据，后端接口一次可以吐出50 条数据，这会导致请求时间过长，首屏特别慢。这种情况就非常适合用懒加载方案去解决。")]),t._v(" "),s("p",[t._v("具体怎么做呢？我们可以先根据手机的可视窗口，估算需要多少条数据，比如京东 App 列表页是 4 条数据，这时候，先从后端拉取 4 条数据进行展现，然后超出首屏的内容，可以在页面下拉或者滚动时再发起加载。")]),t._v(" "),s("p",[t._v("那么如果首页当中图片比较多，比如搜索引擎产品的首页，如何保证首屏秒开呢？同样也可以采用懒加载。以百度图片列表页为例，可视区域范围内的图片先请求加载，一般会根据不同手机机型估算一个最大数据，比如 ihone12 Pro 屏幕比较大， 4 行 8 条数据，我们就先请求 8 条数据，用来在可视区域展示，其他位置采用占位符填充，在滑动到目标区域位置后，才使用真实的图片填充。这样，通过使用懒加载，可以最大限度降低了数据接口传输阶段的时间。")]),t._v(" "),s("h3",{attrs:{id:"缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[t._v("#")]),t._v(" 缓存")]),t._v(" "),s("p",[t._v("如果说懒加载本质是提供首屏后请求非关键内容的能力，那么缓存则是赋予二次访问不需要重复请求的能力。在首屏优化方案中，接口缓存和静态资源缓存起到中流砥柱的作用。")]),t._v(" "),s("h4",{attrs:{id:"接口缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口缓存"}},[t._v("#")]),t._v(" 接口缓存")]),t._v(" "),s("p",[t._v("接口缓存的实现，如果是端内的话，所有请求都走 Native 请求，以此来实现接口缓存。为什么要这么做呢？")]),t._v(" "),s("p",[t._v("App 中的页面展现有两种形式，使用 Native 开发的页面展现和使用 H5 开发的页面展现。如果统一使用 Native 做请求的话，已经请求过的数据接口，就不用请求了。而如果使用 H5 请求数据，必须等 WebView 初始化之后才能请求（也就是串行请求），而 Native 请求时，可以在 WebView 初始化之前就开始请求数据（也就是并行请求），这样能有效节省时间。")]),t._v(" "),s("p",[t._v("那么，如何通过 Native 进行接口缓存呢？**我们可以借助 SDK 封装来实现，即修改原来的数据接口请求方法，实现类似 Axios 的请求方法。**具体来说就是，把包括 post、Get 和 Request 功能的接口，封装进 SDK 中。")]),t._v(" "),s("p",[t._v("这样，客户端发起请求时，程序会调用 SDK.axios 方法，WebView 会拦截这个请求，去查看 App 本地是否有数据缓存，如果有的话，就走接口缓存，如果没有的话，先向服务端请求数据接口，获取接口数据后存放到 App 缓存中。")]),t._v(" "),s("h4",{attrs:{id:"静态资源缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态资源缓存"}},[t._v("#")]),t._v(" 静态资源缓存")]),t._v(" "),s("p",[t._v("数据接口的请求一般来说较少，只有几个，而静态资源（如 JS、CSS、图片和字体等）的请求就太多了。以京东首页为例，177 个请求中除了 1 个文档和 1 个数据接口外，其余都是静态资源请求。")]),t._v(" "),s("p",[t._v("那么，如何做静态缓存方案呢？这里有两种情况，一种是静态资源长期不需要修改，还有一种是静态资源修改频繁的")]),t._v(" "),s("p",[t._v("资源长期不变的话，比如 1 年都不怎么变化，我们可以使用强缓存，如 Cache-Control 来实现。具体来说可以通过设置 Cache-Control:max-age=31536000，来让浏览器在一年内直接使用本地缓存文件，而不是向服务端发出请求。")]),t._v(" "),s("p",[t._v("至于第二种，**如果资源本身随时会发生改动的，可以通过设置 Etag 实现协商缓存。**具体来说，在初次请求资源时，设置 Etag（比如使用资源的 md5 作为 Etag），并且返回 200 的状态码，之后请求时带上 If-none-match 字段，来询问服务器当前版本是否可用。如果服务端数据没有变化，会返回一个 304 的状态码给客户端，告诉客户端不需要请求数据，直接使用之前缓存的数据即可。当然，这里还涉及 WebView相关的东西，我会放在 15 讲详细展开。")]),t._v(" "),s("h4",{attrs:{id:"离线化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#离线化"}},[t._v("#")]),t._v(" 离线化")]),t._v(" "),s("p",[t._v("离线化是指线上实时变动的资源数据静态化到本地，访问时走的是本地文件的方案。说到这里，你是不是想到了离线包？离线包是离线化的一种方案，是将静态资源存储到 App 本地的方案，不过，在这里，我重点讲的是离线化的另一个方案——把页面内容静态化到本地。")]),t._v(" "),s("p",[t._v("离线化一般适合首页或者列表页等不需要登录页面的场景，同时能够支持 SEO 功能。那么，如何实现离线化呢？其实，打包构建时预渲染页面，前端请求落到 index.html 上时，已经是渲染过的内容。此时，可以通过 Webpack 的 prerender-spa-plugin 来实现预渲染，进而实现离线化。Webpack 实现预渲染的代码示例如下：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// webpack.conf.js")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" path "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" PrerenderSpaPlugin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prerender-spa-plugin'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("plugins")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrerenderSpaPlugin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译后的html需要存放的路径")]),t._v("\n        path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../dist'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 列出哪些路由需要预渲染")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/about'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/contact'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("h4",{attrs:{id:"并行化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并行化"}},[t._v("#")]),t._v(" 并行化")]),t._v(" "),s("p",[t._v("懒加载、缓存和离线化都是在请求本身上下功夫，想尽办法减少请求或者推迟请求，并行化则是在请求通道上功夫，解决请求阻塞问题，进而减少首屏时间。 这就像解决交通阻塞一样，除了限号减少车辆，还可以增加车道数量，我们在处理请求阻塞时，也可以加大请求通道数量——借助于HTTP 2.0 的多路复用方案来解决。")]),t._v(" "),s("p",[t._v("HTTP 1.1 时代，有两个性能瓶颈点，串行的文件传输和同域名的连接数限制（6个），到了HTTP 2.0 时代，因为提供了多路复用的功能，传输数据不再使用文本传输（文本传输必须按顺序传输，否则接收端不知道字符的顺序），而是采用二进制数据帧和流的方式进行传输。")]),t._v(" "),s("p",[t._v("其中，帧是数据接收的最小单位，流是连接中的一个虚拟通道，它可以承载双向信息。每个流都会有一个唯一的整数 ID 对数据顺序进行标识，这样接收端收到数据后，可以按照顺序对数据进行合并，不会出现顺序出错的情况。所以，在使用流的情况下，不论多少个资源请求，只要建立一个连接即可。")]),t._v(" "),s("p",[t._v("文件传输环节问题解决后，同域名连接数限制问题怎么解决呢？以 Nginx 服务器为例，原先因为每个域名有 6 个连接数限制，最大并发就是 100 个请求，采用 HTTP 2.0 之后，现在则可以做到 600，提升了 6倍。")]),t._v(" "),s("p",[t._v("你一定会问，这不是运维侧要做的事情吗，我们前端开发需要做什么？我们要改变静态文件合并（JS、CSS、图片文件）和静态资源服务器做域名散列这两种开发方式。")]),t._v(" "),s("p",[t._v("具体来说，使用 HTTP 2.0 多路复用之后，单个文件可以单独上线，不需要再做 JS 文件合并了。因为原先遇到由 A 和 B 组成的 C 文件，其中 A 文件稍微有点修改，整个C 文件就需要重新加载的情况，如今由于没有同域名连接数限制了，也就不需要了。")]),t._v(" "),s("p",[t._v("此外， 02 讲性能瓶颈点我提到过，为了解决静态域名阻塞，提升请求并行能力，需要将静态域名分为 pic0-pic5。虽然通过静态资源域名散列的办法解决了问题，但这样做的话，DNS 解析时间会变长很多，同时还需要额外的服务器来满足，如今，采用 HTTP 2.0 多路复用之后，也不需要这样做了。")]),t._v(" "),s("p",[t._v("小结")]),t._v(" "),s("p",[s("img",{attrs:{src:"/performance/platform_7.png",alt:"小结"}})]),t._v(" "),s("p",[t._v("好了，以上就是解决首屏时间秒开的四种方案，在实际工作当中，前端工程师还会用到离线包和 SSR 。但 SSR 的实现比较重，要做的改造比较多，要求开发者对 node 生态有很好理解和把握，而离线包依赖于 App 端内的环境，对于端外和 PC 站不具有普适性。")]),t._v(" "),s("h2",{attrs:{id:"白屏优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#白屏优化"}},[t._v("#")]),t._v(" 白屏优化")]),t._v(" "),s("p",[t._v("现在我们假设一个场景，有一天你想要在某电商 App 上买个手机，于是你搜索后进入商品列表页，结果屏幕一片空白，过了好久还是没什么内容出现，这时候你是不是会退出来，换另外一个电商 App 呢？这就是白屏时间过长导致用户跳出的情形。")]),t._v(" "),s("p",[t._v("作为前端开发者，我们遇到这种问题如何解决呢？首先去性能平台上查看白屏时间指标，确认是否是白屏问题。问题确认后，我们可以基于影响白屏时间长短的两个主要因素来解决——DNS 查询和首字符展示。")]),t._v(" "),s("h3",{attrs:{id:"dns-查询优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dns-查询优化"}},[t._v("#")]),t._v(" DNS 查询优化")]),t._v(" "),s("p",[t._v("DNS 查询是指浏览器发起请求时，需要将用户输入的域名地址转换为 IP 地址的过程，这个转换时间长短就会影响页面的白屏时间。")]),t._v(" "),s("p",[t._v("那么如何对 DNS 查询进行优化呢？根据 DNS 查询过程，我们可以从前端和客户端这两部分采取措施。")]),t._v(" "),s("p",[t._v("前端侧，可以通过在页面中加入 dns-prefetch，在静态资源请求之前对域名进行解析，从而减少用户进入页面的等待时间。如下所示：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("meta http"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("equiv"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x-dns-prefetch-control"')]),t._v(" content"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"on"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("link rel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dns-prefetch"')]),t._v(" href"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://s.google.com/"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("其中第一行中的 "),s("code",[t._v("x-dns-prefetch-control")]),t._v(" 表示开启 DNS 预解析功能，第二行 "),s("code",[t._v("dns-prefetch")]),t._v(" 表示强制对 "),s("code",[t._v("s.google.com")]),t._v(" 的域名做预解析。这样在 "),s("code",[t._v("s.google.com")]),t._v(" 的资源请求开始前，DNS 解析完成，后续请求就不需要重复做解析了。不要小看这个标签哦，它可以为你减少 150ms 左右的 DNS 解析时间。")]),t._v(" "),s("p",[t._v("客户端侧呢？可以在启动 App 时，同步创建一个肉眼不可见的 WebView（例如 1*1 像素的 webview），将常用的静态资源路径写入这个 WebView 中，然后对它做域名解析并放入缓存中。这样后面需要使用 WebView 打开真正所需的页面时，由于已经做过域名解析了，客户端直接从缓存中获取即可。")]),t._v(" "),s("p",[t._v("当然如果是端外页面，因为没在 App 里面，就没法使用 1*1 WebView 的策略了，我们可以使用 iframe ，也能达到类似效果。")]),t._v(" "),s("p",[t._v("以上是一个轻量级的方案，通过它可以将 DNS 解析时间控制在 400ms以内（这个算是比较快的）。如果你想要将耗时进一步压缩，比如控制在 200ms，此时就需要一个重量级的方案了。具体来说，可以采用 IP 直连方式，原来是请求www.google.com，现在我们通过调用 SDK 进行域名解析，拿到对应的 IP（如 6.6.6.6），然后直接请求这个 IP 地址拿到数据。")]),t._v(" "),s("p",[t._v("当然，这个实现起来需要避过许多坑，比如，HTTPS 证书和配置文件。")]),t._v(" "),s("p",[t._v("Https 证书是指当客户端使用 IP 直连时，请求 URL 中的 host 会被替换成对应的 IP，所以在证书验证时，会出现 domain 不匹配的情况，导致 SSL/TLS 握手不成功。")]),t._v(" "),s("p",[t._v("怎么解决呢？在非 SNI（Server Name Indication，表示单 IP多域名）的场景下，可以把证书验证环节独立出来 （如 Hook证书校验环节），然后将 IP 替换为原来的域名。在 SNI 场景下，可以定制 SSLSocketFactory，在 createSocket 时替换为 IP，并进行 SNI/HostNameVerify 配置。")]),t._v(" "),s("p",[t._v("而配置文件方面，一般在域名只有两三个的情况时，我们可以用到它来做 IP 和域名的映射。但随着机房的扩大，每次扩机器都要升级配置文件，后续会非常麻烦。")]),t._v(" "),s("p",[t._v("对此我们可以采用 httpDNS 来解决。这是因为 httpDNS 可以准确调度到对应区域的服务器 IP 地址给用户，同时还可以避免运行商 DNS 劫持。具体来说， SDK 会通过发报文（类似系统向 DNS 运营商发的报文）向 httpDNS 做一个 HTTP 请求（也是通过 IP 直接请求），请求通过后拿到对应域名，然后进行 IP 直连，完成资源或者数据接口请求。")]),t._v(" "),s("h3",{attrs:{id:"首字符展示优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#首字符展示优化"}},[t._v("#")]),t._v(" 首字符展示优化")]),t._v(" "),s("p",[t._v("所谓首字符展示，通常我们会在页面加载过程中出现一个 loading 图，用来告诉用户页面内容需要加载，请耐心等待。但这样一个 loading 图既无法让用户感受到页面加载到什么程度，也无法给用户视觉上一个焦点，让人们的注意力集中在上面。")]),t._v(" "),s("p",[t._v("如何解决这个问题呢？我们可以使用骨架屏。骨架屏（Skeleton Screen）是指在页面数据加载完成前，先给用户展示出页面的大致结构（灰色占位图），告诉用户页面正在渐进式地加载中，然后在渲染出实际页面后，把这个结构替换掉。骨架屏并没有真正减少白屏时间，但是给了用户一个心理预期，让他可以感受到页面上大致有什么内容。")]),t._v(" "),s("p",[t._v("那么，如何构建骨架屏呢？因为考虑到每次视觉修改或者功能迭代，骨架屏都要配合修改，我建议采用自动化方案，而不是手动骨架屏方案（也就是自己编写骨架屏代码）。骨架屏的实现方法有以下三个步骤。")]),t._v(" "),s("p",[t._v("步骤一，确定生成规则，遍历所有的 DOM 元素。针对特定区块（如视频、音频）生成相应的代码块，获取原始页面中 DOM 节点的宽度、高度和距离视窗的位置，计算出当前设备快高对应的大小，转换成相应的百分比，然后来适配不同的设备。")]),t._v(" "),s("p",[t._v("步骤二，基于上述规则结合 CLI 工具可以通过脚手架自动生成骨架屏")]),t._v(" "),s("p",[t._v("步骤三，将骨架屏自动化注入页面，再利用 Puppeteer 把骨架屏代码注入页面中自动运行。整个过程比较复杂，且有不少坑")]),t._v(" "),s("p",[t._v("以上就是白屏时间优化方面相关的内容，但即便首屏展示比较快，如果有卡顿的现象，用户操作也会很不流畅，那怎么解决这个问题呢。下面我们就讲聊聊卡顿治理。")]),t._v(" "),s("h3",{attrs:{id:"卡顿治理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#卡顿治理"}},[t._v("#")]),t._v(" 卡顿治理")]),t._v(" "),s("p",[t._v("卡顿现象，一般可以通过用户反馈或性能平台来发现。比如我们接到用户说某页面比较卡，然后在性能平台上查看卡顿指标后，发现页面出现连续 5 帧超过 50ms ，这就属于严重卡顿。如何处理呢？")]),t._v(" "),s("p",[t._v("首先也还是问题的定位，先通过 charles 等工具抓包看一下数据接口，如果是和数据相关的问题，找后端同事，或者用数据缓存的方式解决。如果问题出在前端，一般和以下两种情形有关：浏览器的主线程与合成线程调度不合理，以及计算耗时操作。")]),t._v(" "),s("p",[t._v("浏览器的主线程与合成线程调度不合理\n比如，在某电商 App 页面点击抽奖活动时，遇到一个红包移动的效果，在红包位置变化时，页面展现时特别卡，这就是主线程和合成线程调度的问题。怎么解决呢？")]),t._v(" "),s("p",[t._v("一般来说，主线程主要负责运行 JavaScript，计算 CSS 样式，元素布局，然后交给合成线程，合成线程主要负责绘制。当使用 height、width、margin、padding 等作为 transition 值时，会让主线程压力很大。此时我们可以使用 transform 来代替直接设置 margin 等操作。")]),t._v(" "),s("p",[t._v("比如红包元素从 margin-left:-10px 渲染到 margin-left:0，主线程需要计算样式 margin-left:-9px，margin-left:-8px，一直到 margin-left:0，每一次主线程计算样式后，合成线程都需要绘制到 GPU 再渲染到屏幕上，来来回回需要进行 10 次主线程渲染，10 次合成线程渲染，这给浏览器造成很大压力，从而出现卡顿。")]),t._v(" "),s("p",[t._v("如何解决呢？我们可以利用 transform 来做，比如 tranform:translate(-10px,0) 到 transform:translate(0,0)，主线程只需要进行一次tranform:translate(-10px,0) 到 transform:translate(0,0)，然后合成线程去一次将 -10px 转换到 0px。这样的话，总计 11 次计算，可以减少 9 步操作，假设一次 10ms，将减少 90ms。")]),t._v(" "),s("p",[t._v("计算耗时操作\n除了主线程和合成线程调度不合理导致的卡顿，还有因为计算耗时过大导致的卡顿。遇到这类问题，一般有两种解法：空间换时间和时间换空间。")]),t._v(" "),s("p",[t._v("空间换时间方面，比如你需要频繁增加删除很多 DOM 元素，这时候一定会很卡，在对 DOM 元素增删的过程中最好先在 DocumentFragment （DOM文档碎片）上操作，而不是直接在 DOM上操作。只在最后一步操作完成后，将所有 DocumentFragment 的变动更新到 DOM上，从而解决频繁更新 DOM 带来的卡顿问题。")]),t._v(" "),s("p",[t._v("至于时间换空间，一般是通过将一个复杂的操作细分成一个队列，然后通过多次操作解决复杂操作的问题。")]),t._v(" "),s("p",[t._v("比如 2010 年时，我做过一个 WebIM 离线消息的项目，其中一个功能是将批量消息下载到本地，点击下载后，由于文件过大，浏览器出现卡顿甚至卡死的情况。怎么办？最后我通过实现一个 Chunk 方法，创建了一个队列，定时取出队列的任务，然后在本地服务器上将内容再次合并的方式来解决。代码示例如下：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("chunk")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("context")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//shift方法可以获取队列中下一个要处理的项目")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shift")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//通过call调用的process函数，这样可以设置一个合适的执行环境（如果必须）")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("process")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("callee"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("具体来说，我是通过 array.shift 将数组切分为不同的队列任务，调用 setTimeout 方法设置 100ms 的延时，最后将调用 process.call 方法去执行，从而解决了复杂任务带来的卡顿问题。")]),t._v(" "),s("p",[t._v("小结\n"),s("img",{attrs:{src:"/performance/platform_8.png",alt:"小结"}})]),t._v(" "),s("p",[t._v("好了，以上就是白屏时间优化和卡顿治理相关的内容。")]),t._v(" "),s("p",[t._v("在卡顿治理方面，我提到使用 Settimeout 分割队列，但在实际使用时，尤其是做动画时候要注意，Settimeout 设置定时时间不准（比如设置 0ms 延迟，实际中会延迟 4ms 左右），如果时间间隔过小（如小于 16ms），还会出现因为掉帧导致的卡顿，所幸新版本浏览器（IE10+）提供了requestAnimationFrame 方法，我们可以封装一个兼容性方法较好解决它。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("  window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("requestAnimationFrame "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("requestAnimationFrame "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n              window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("webkitRequestAnimationFrame "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n              window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mozRequestAnimationFrame "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                  window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("h2",{attrs:{id:"性能专项测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能专项测试"}},[t._v("#")]),t._v(" 性能专项测试")]),t._v(" "),s("p",[t._v("什么叫性能专项测试呢？简单来说就是，在业务上线前，我们对性能指标（如首屏时间、白屏时间、页面加载时长等）进行测试，确保上线后性能指标达标。")]),t._v(" "),s("p",[t._v("那怎么做呢？大致分四步：")]),t._v(" "),s("ul",[s("li",[t._v("第一步，确定线下测试方案；")]),t._v(" "),s("li",[t._v("第二步，设定线下测试标准；")]),t._v(" "),s("li",[t._v("第三步，选用合适的测试环境进行测试及视频分帧计算；")]),t._v(" "),s("li",[t._v("第四步，输出测试结果。")])]),t._v(" "),s("p",[t._v("接下来我就以首屏时间测试为例详细为你介绍下。")]),t._v(" "),s("h3",{attrs:{id:"性能测试方案选型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能测试方案选型"}},[t._v("#")]),t._v(" 性能测试方案选型")]),t._v(" "),s("p",[t._v("未上线的业务，一般有两种方案来做性能测试：使用性能 SDK 和以录制视频的方式进行。")]),t._v(" "),s("p",[t._v("第一个方案，使用性能 SDK ，比如我们要采集首屏时间指标，就使用 "),s("code",[t._v("MutationObserver")]),t._v(" ，这一点我们在第 4 讲指标采集部分已经提到过。")]),t._v(" "),s("p",[t._v("它的优点很明显，线上和线下方案一致。缺点呢？因为业务还没上线，内网测试的访问量有限，从而造成性能平台后端的请求少，无法形成大量的首屏时间分布数据，也就无法在性能平台上可视化展现。")]),t._v(" "),s("p",[t._v("第二个方案，以录制视频的方式进行性能测试，优点是可以和 QA（Quality Assurance，表示测试人员）现有基础设施相结合。QA 测试时，不仅会测 H5 页面的首屏时间，还会测试 Native 页面的响应时间以及 App 内存使用和 CPU 占用等信息。由于测试项目较多，在这个过程中，QA 团队会沉淀一些测试基础设施，比如 App 代码覆盖率测试工具、异常测试平台、数据构造集成测试平台等，而录制视频是其中必不可少的手段。")]),t._v(" "),s("p",[t._v("所以，在性能测试上，我一般建议采用录制视频的方式来进行，除此之外，也方便后期的性能计算。")]),t._v(" "),s("p",[t._v("录制视频一般有手动方案和自动化方案。所谓手动方案就是通过手机自带的视频录制功能来进行，而自动化方案则是通过 adb 录制。前者比较简单也好理解，后者效率会很高，在这里我重点介绍一下通过 adb 录制的自动化方案。")]),t._v(" "),s("p",[t._v("adb 是 andorid studio下提供的一个工具，在电脑上通过它可以控制模拟器（也就是模拟手机）或者真实的手机设备（需要通过数据线连接到电脑）。比如我们可以通过它打开一个 App 页面，运行 shell 命令，安装软件等功能。")]),t._v(" "),s("h3",{attrs:{id:"性能测试标准设定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能测试标准设定"}},[t._v("#")]),t._v(" 性能测试标准设定")]),t._v(" "),s("p",[t._v("既然是要测试，就要有一个标准来判断某个性能是否达标。有关性能标准，我在第一讲里的关键指标设定介绍过，也在模块二专门说明了首屏时间、白屏时间、卡顿等的指标采集方案。")]),t._v(" "),s("p",[t._v("在这里我想说的是，首屏时间的性能测试标准设定，需要注意两点：")]),t._v(" "),s("ul",[s("li",[t._v("分频计算的标准，也就是什么时候认为首屏结束；")]),t._v(" "),s("li",[t._v("确定首屏时间的标准。")])]),t._v(" "),s("p",[t._v("其中，分频计算的标准，建议采用如下标准：")]),t._v(" "),s("p",[t._v("白屏响应时间 = 白屏最后 - 帧的时间 - 点击时的起始帧时间")]),t._v(" "),s("p",[t._v("首屏加载时间 = 内容完全加载出来那一帧的时间 - 点击时的起始帧时间")]),t._v(" "),s("p",[t._v("首屏时间的标准，因为缺乏海量的数据，也无法直接使用之前的秒开率的标准，我们可以退而求其次，采用不同网络环境下的性能标准。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/performance/platform_9.png",alt:"小结"}})]),t._v(" "),s("p",[t._v("如果你想要测试页面是否卡顿，它的标准我在前面也提到过："),s("strong",[t._v("连续 5 帧超过 50ms，判定为卡顿；单帧渲染超过250ms，就可以判定为严重卡顿。")])]),t._v(" "),s("p",[t._v("确定完时间标准后，紧跟着就是寻找合适的性能测环境，进行录屏然后计算视频分帧，也就是我一开始提到的第三步。")]),t._v(" "),s("h3",{attrs:{id:"性能测试环境搭建及测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能测试环境搭建及测试"}},[t._v("#")]),t._v(" 性能测试环境搭建及测试")]),t._v(" "),s("p",[t._v("所谓的性能测试环境搭建，不是指需要搭建测试服务器及接口测试等，而是寻找合适的网络环境进行测试。由于现在的网络环境多样，比如有 WIFI，有常见的 3G、4G，有少见的 2G 弱网，还有现在流行的 5G 网络，在专项测试的时候，为了提前发现性能问题，我们需要考虑到各种网络环境下的情况。")]),t._v(" "),s("p",[t._v("那具体怎么做呢？这时候就会出现一个有趣的现象——有些人开始“神出鬼没”了。")]),t._v(" "),s("p",[t._v("比如，在 58 同城，各个业务（如房产、招聘、黄页、二手车等）都有自己的前端团队，每个团队开发完成的页面，需要集成到 58 App 里面，App 要求各个业务在性能结果方面达标。为了测试达标，前端和测试工程师就会到各种网络环境下来查看相关性能如何了。")]),t._v(" "),s("p",[t._v("像 2G 网络环境，由于在一定区域内，使用 2G 网络的人越少它的信号越好，比如半夜时分。所以，房产业务的前端和测试工程师，会深更半夜拿着手机，在公司旁边四处找 2G 网络信号好的地方录屏以作测试，甚至有时候会到公司旁边的星巴克进行。")]),t._v(" "),s("p",[t._v("无独有偶，腾讯微信团队也是如此，他们对第三方接入的 H5 ，会到周围各种网络环境下进行性能测试。")]),t._v(" "),s("p",[t._v("在这里，我分享下寻找网络环境的经验。一般 4G 信号容易受物体遮挡或者天气的影响，在空旷地点，天气晴朗情况下信号会明显好很多。当然，如果你留意过信号塔在哪里，附近的信号会更好。2G/3G 的话，一般来说信号很稳定，你在办公区域或者 WIFI 信号强的地方，使用弱网的人少时，信号一般是不错的，所以前面提到星巴克等一些咖啡厅是首选测试地点。")]),t._v(" "),s("p",[t._v("需要注意的是，此时的测试不要求平均时间，不需要关注首屏秒开率，只要在某种特定网络环境下首屏时间达标即可。")]),t._v(" "),s("p",[t._v("做完视频录屏之后，接下来我们当然可以人工去判断首屏结束时间，比如拿秒表去计算时间差。但这样做有两个缺点：一是人工去计算首屏时间的话，前后偏差几百毫秒很正常，准确性没有保证；二是人工判断，效率低，且没法和整体测试链路打通。比如，测试团队还需要对内存占用、CPU使用情况、流量、App 崩溃率等进行测试时，如果采用手动计算，就没法一次性采集到所有指标。")]),t._v(" "),s("p",[t._v("所以，一般我会建议采取分帧计算的方式进行。具体怎么做呢？主要分为下面三步：")]),t._v(" "),s("ol",[s("li",[t._v("安装 openCV、python ，通过 Python 的 VideoCapture 将视频分帧存储；")]),t._v(" "),s("li",[t._v("分帧图片命名，使用当前视频播放时间位置（毫秒）命名存储图片；")]),t._v(" "),s("li",[t._v("首屏时长计算 = 首屏结束帧文件名；")])]),t._v(" "),s("p",[t._v("最后，我们拿时长和标准对比即可知道性能是否达标。下面是基于 python 借助 openCV 库做的视频分帧计算。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"视频分帧"')]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" cv2\nvc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("VideoCapture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'C:\\Users\\admin\\Desktop\\1.mp4'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  # 读入视频文件，命名cv\nn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  # 计数\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" vc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isOpened")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  # 判断是否正常打开\n    rval"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" frame "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    rval "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" False\n\ntimeF "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("  # 视频帧计数间隔频率\n\ni "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("rval")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  # 循环读取视频帧\n    rval"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" frame "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" timeF "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  # 每隔timeF帧进行存储操作\n        i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        cv2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("imwrite")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'C:\\Users\\admin\\Desktop\\1/{}.jpg'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" frame"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  # 存储为图像\n    n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    cv2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("waitKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nvc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("release")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br")])]),s("p",[t._v("首先，我引入 CV2 库，通过 VideoCapture 读入视频文件，然后通过设置计数间隔频率，比如我这里设置的是 10ms，循环来获取视频，最后通过 cv2.imwrite 来写入文件目录，我们就可以直接看该目录下的文件。")]),t._v(" "),s("p",[t._v("性能测试结果输出\n拿到视频分帧结果后，见下图")]),t._v(" "),s("p",[s("img",{attrs:{src:"/performance/platform_10.png",alt:"小结"}})]),t._v(" "),s("p",[t._v("图中一张一张的图片就是分帧处理的结果，文件名代表着加载帧时对应的时间，比如我们找到第14 张的图片，判断这个就是白屏结束的位置（图中红线框的部分），对应图片文件是2788.jpg，也就是说首屏时间是 2788ms。对照一下标准，WIFI 下首屏时间 2788ms，属于比较慢的情况，需要做优化。")]),t._v(" "),s("p",[t._v("小结\n"),s("img",{attrs:{src:"/performance/platform_11.png",alt:"小结"}})]),t._v(" "),s("p",[t._v("好了，以上就是我们以首屏时间为例，介绍了如何进行性能专项测试，这里面还有一些注意事项：")]),t._v(" "),s("p",[t._v("一是在视频分帧计算时，我们 openCV 最好能借助 brew（ Mac 环境下）进行安装，如果没有 brew 的话（ Windows 等环境下），可以通过 Anaconda 来安装这个软件；")]),t._v(" "),s("p",[t._v("二是计算首屏时间方面，我们前文提到的首屏时间判断，是通过人工提取对应着首屏时间的那一帧。我们后来试着用图像识别的方式去自动提取首屏时间对应的那一帧。这样做的目的主要是提高准确度，以及提高效率。")]),t._v(" "),s("p",[t._v("具体是这么做的呢？")]),t._v(" "),s("p",[t._v("我们拿到视频分帧计算结果后，通过图像识别的系统，去判断关键帧—— 首屏时间对应那一帧。哪个是关键帧呢？我们认为图片从不稳定到图片稳定那一刹那的时间就是关键帧。 当两张图片的变化值小于 5%，即可认为图片趋于稳定，我们以 95 分位值为判定值，如果内容 95% 都不发生变化，则下一帧即认为是视觉稳定的时间点，也就是首屏时间点。")])])}),[],!1,null,null,null);s.default=e.exports}}]);