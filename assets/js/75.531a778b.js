(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{404:function(e,n,t){"use strict";t.r(n);var r=t(4),a=Object(r.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"首屏指标采集有手动采集和自动化采集两种"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#首屏指标采集有手动采集和自动化采集两种"}},[e._v("#")]),e._v(" 首屏指标采集有手动采集和自动化采集两种")]),e._v(" "),n("h3",{attrs:{id:"手动采集办法及优缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#手动采集办法及优缺点"}},[e._v("#")]),e._v(" 手动采集办法及优缺点")]),e._v(" "),n("p",[e._v("所谓手动采集，一般是通过埋点的方式进行， 比如在页面开始位置打上 "),n("code",[e._v("FMP.Start()")]),e._v("，在首屏结束位置打上 "),n("code",[e._v("FMP.End()")]),e._v("，利用"),n("code",[e._v("FMP.End()-FMP.Start()")]),e._v("获取到首屏时间。")]),e._v(" "),n("p",[e._v("以电商平台为例，如果是电商类商品详情页，首屏包括头图、购买、商品信息、下单按钮等，就在这些内容加载完毕的位置打上首屏结束的点。")]),e._v(" "),n("p",[e._v("如果是电商列表页，瀑布流型的页面，需要根据各个机型下的首屏位置，估算一个平均的首屏位置，然后打上点。")]),e._v(" "),n("p",[e._v("如果是直播型的页面，页面核心是一个直播框，就需要在直播框的结束位置，打上点。")]),e._v(" "),n("p",[e._v("手动采集都有哪些优点和缺点呢？")]),e._v(" "),n("p",[e._v("首先是它兼容性强，业务同学知道在这个业务场景下首屏结束点在哪里，可以随情况变动。其次是去中心化，各个业务负责自己的打点代码，有问题时业务同学去排查即可，假如一条业务出现问题，并不会影响其他业务。")]),e._v(" "),n("p",[e._v("缺点方面，手动采集会和业务代码严重耦合，如果首屏采集逻辑调整，业务代码也需要修改；还有，它的覆盖率不足，因为要手动采集，业务一旦忙起来，性能优化方案就会延迟排后。")]),e._v(" "),n("p",[e._v("最后，手动采集的统计结果并不精确，因为依赖于人，每个人对首屏的理解有偏差，经常打错或者忘记打点。")]),e._v(" "),n("h3",{attrs:{id:"自动化采集优势及办法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自动化采集优势及办法"}},[e._v("#")]),e._v(" 自动化采集优势及办法")]),e._v(" "),n("p",[e._v("接下来我们看自动化采集。获取首屏时间，目前业界还是以自动化采集为主。所谓自动化采集，即引入一段通用的代码来做首屏时间自动化采集，引入过程中，除了必要的配置不需要做其他事情。")]),e._v(" "),n("p",[e._v("自动化采集的好处是独立性更强，接入过程更自动化。具体的自动化采集代码，可以由一个公共团队来开发，试点后，推广到各个业务团队。而且统计结果更标准化，同一段统计代码，标准更统一，业务侧同学也更认可这个统计结果。")]),e._v(" "),n("p",[e._v("当然，它也有缺点，最明显的是，有些个性化需求无法满足，毕竟在工作中，总会有一些特殊业务场景。所以，采用自动化采集方案必须做一些取舍。")]),e._v(" "),n("p",[e._v("既然是自动化采集，具体怎么采集呢？都有哪些办法？")]),e._v(" "),n("p",[e._v("首屏指标自动化采集，需要考虑是服务端模板业务，还是单页面（SPA）应用开发业务，业务场景不同，对应的采集方法也不同。下面我来分别介绍下。")]),e._v(" "),n("h4",{attrs:{id:"服务端模板业务下的采集办法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#服务端模板业务下的采集办法"}},[e._v("#")]),e._v(" 服务端模板业务下的采集办法")]),e._v(" "),n("p",[e._v("提到服务端模板业务，很多人可能会问，现在不都是 Vue 和 React 这些单页面应用的天下了吗？其实在一些 B 端业务的公司用的还是服务端模板，如 Velocity、Smarty 等。另外大名鼎鼎的 SSR 用的也是服务端模板。")]),e._v(" "),n("p",[e._v("这些业务后端比较重，前端偏配合，出于效率方面的考虑，前后端并没有解耦。因此，公司内部研发同学既做前端又做后端，这时候如果使用现在流行的 Vue/React，无疑会增加学习成本。")]),e._v(" "),n("p",[e._v("那服务端模板项目的加载流程是怎样的呢？")]),e._v(" "),n("p",[e._v("大致流程是这样的：HTTP 请求 → HTML 文档加载解析完成 → 加载样式和脚本文件 → 完成页面渲染。")]),e._v(" "),n("p",[e._v("其中，HTML 文档加载解析完成的时间点，就是首屏时间点，而要采集这个首屏时间，可以用浏览器提供的 DOMContentLoaded 接口来实现。")]),e._v(" "),n("p",[e._v("我们来直观看一下什么是 DOMContentLoaded。打开 Chrome 浏览器调试工具，进入 Network 选项，重新加载网页，我们就会得到这么一张图。")]),e._v(" "),n("p",[n("img",{attrs:{src:"/performance/DOMContentLoaded.png",alt:"DOMContentLoaded"}}),e._v("\nDOMContentLoaded 示意图")]),e._v(" "),n("p",[e._v("右侧中间竖向的一条蓝线，代表了 DOMContentLoaded 这个事件触发的时间，而下面的蓝色文字（DOMContentLoaded 1.02s），代表 HTML 元素加载解析完成用了 1.02 秒。根据服务端模板项目加载流程，我们就知道这个时间就是首屏时间。")]),e._v(" "),n("p",[e._v("那么，DOMContentLoaded 时间具体的采集思路是怎样的呢？")]),e._v(" "),n("p",[e._v("当页面中的 HTML 元素被加载和解析完成（不需要等待样式表、图片和一些脚本的加载过程），DOMContentLoaded 事件触发。此时我们记录下当前时间 domContentLoadedEventEnd，再减去页面初始进入的时间 fetchStart，就是 DOMContentLoaded 的时间，也就是我们要采集的首屏时间。\n即首屏时间=DOMContentLoaded 时间=domContentLoadedEventEnd-fetchStart。")]),e._v(" "),n("p",[e._v("那么，这种采集方法可以照搬到单页面应用下吗？答案是不可以。")]),e._v(" "),n("h4",{attrs:{id:"单页面-spa-应用业务下的采集办法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单页面-spa-应用业务下的采集办法"}},[e._v("#")]),e._v(" 单页面（SPA）应用业务下的采集办法")]),e._v(" "),n("p",[e._v("SPA 页面首屏时间采集会有什么不同？如果也使用 Performance API 会有什么问题？")]),e._v(" "),n("p",[e._v("我举个例子，在 2018 年 6 月的 GMTC 大会上，阿里云曾分享了他们的一个首屏指标采集结果：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("使用 Performance API 接口采集的首屏时间是 1106ms\n实际的首屏时间是 1976ms\n")])])]),n("p",[e._v("为什么偏差如此大呢？")]),e._v(" "),n("p",[e._v("原来在 Vue 页面中，整体加载流程是这样的。")]),e._v(" "),n("p",[e._v("用户请求一个页面时，页面会先加载 index.html，加载完成后，就会触发 DOMContentLoaded 和 load。而这个时候，页面展示的只是个空白页。此时根本不算真正意义的首屏。接下来，页面会加载相关脚本资源并通过 axios 异步请求数据，使用数据渲染页面主题部分，这个时候首屏才渲染完成。")]),e._v(" "),n("p",[e._v("正是这个原因造成了用 Performance 接口取得的时间是 1106ms，实际时间则是 1976ms，差距如此之大。可以说，SPA 的流行让 Performance 接口失去了原来的意义。那么，这种情况下怎么采集首屏指标呢？可以使用 MutationObserver 采集首屏时间。")]),e._v(" "),n("p",[e._v("SPA 页面因为无法基于 DOMContentLoaded 做首屏指标采集，最初我们想过使用技术栈的生命周期来解决这个问题。")]),e._v(" "),n("p",[e._v("比如，我们以 Vue 为例，记录首屏各个组件 mounted 的时间，最终在 onload 时，统计出最后一个组件 mounted 的时间，做为首屏时间。但很快，我就发现这个方案存在以下问题。")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("如果一个首屏页面的内容没有被组件化，那么首屏时间无法被统计到，除非各个业务都定一套组件标准，首屏内容必须封装成组件。")])]),e._v(" "),n("li",[n("p",[e._v("前面也提过 onload 的时间并非最终时间，可能 onload 时，首屏还没加载完。")])]),e._v(" "),n("li",[n("p",[e._v("没有考虑首屏是张图片的情况，在这种情况，首屏虽然加载完成了，可是图片是异步的，图片并没有加载，试想你会在看不到商品图片的情况下，直接下单吗？")])])]),e._v(" "),n("p",[e._v("当时我们就想，如果能在首屏渲染过程中，把各个资源的加载时间记录到日志中，后续再通过分析，确定某一个资源加载完的时间，就是首屏时间。而 MutationObserver 恰恰可以做到这些。")]),e._v(" "),n("p",[e._v("MutationObserver 是什么意思呢？请看 MDN 上关于它的定义：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("MutationObserver 接口提供了监视对 DOM 树所做更改的能力。它被设计为旧的 Mutation Events 功能的替代品，该功能是 DOM3 Events 规范的一部分。\n")])])]),n("p",[e._v("简单来说， 使用 MutationObserver 能监控页面信息的变化，当页面 body 变化最剧烈的时候，我们拿到的时间数据，就是首屏时间。")]),e._v(" "),n("p",[e._v("但具体怎么做呢？")]),e._v(" "),n("p",[e._v("首先，在用户进入页面时，我们可以使用 MutationObserver 监控 DOM 元素 （Document Object Model，文档对象模型）。当 DOM 元素发生变化时，程序会标记变化的元素，记录时间点和分数，存储到数组中。数据的格式类似于 [200ms,18.5] 。")]),e._v(" "),n("p",[e._v("为了提升计算的效率，我们认为首屏指标采集到某些条件时，首屏渲染已经结束，我们需要考虑首屏采集终止的条件，即计算时间超过 30 秒还没有结束；计算了 4 轮且 1 秒内分数不再变化；计算了 9 次且分数不再变化。")]),e._v(" "),n("p",[e._v("接下来，设定元素权重计算分数。")]),e._v(" "),n("p",[e._v("递归遍历 DOM 元素及其子元素，根据子元素所在层数设定元素权重，比如第一层元素权重是 1，当它被渲染时得 1 分，每增加一层权重增加 0.5，比如第五层元素权重是 3.5，渲染时给出对应分数。")]),e._v(" "),n("p",[e._v("为什么需要权重呢？")]),e._v(" "),n("p",[e._v("因为页面中每个 DOM 元素对于首屏的意义是不同的，越往内层越接近真实的首屏内容，如图片和文字，越往外层越接近 body 等框架层。")]),e._v(" "),n("p",[e._v("最后，根据前面的得分，计算元素的分数变化率，获取变化率最大点对应的分数。然后找到该分数对应的时间，即为首屏时间。")]),e._v(" "),n("p",[e._v("分数部分核心计算逻辑是递归遍历元素，将一些无用的标签排除，如果元素超过可视范围返回 0 分，每一层增加 0.5 的权重，具体请看下面代码示例。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('```js\nfunction CScor(el, tiers, parentScore) {\n    let score = 0;\n    const tagName = el.tagName;\n    if ("SCRIPT" !== tagName && "STYLE" !== tagName && "META" !== tagName && "HEAD" !== tagName) {\n      const childrenLen = el.children ? el.children.length : 0;\n      if (childrenLen > 0) for (let childs = el.children, len = childrenLen - 1; len >= 0; len--) {\n        score += calculateScore(childs[len], tiers + 1, score > 0);\n      }\n      if (score <= 0 && !parentScore) {\n        if (!(el.getBoundingClientRect && el.getBoundingClientRect().top < WH)) return 0;\n      }\n      score += 1 + .5 * tiers;\n    }\n    return score;\n}\n```\n')])])]),n("p",[e._v("变化率部分核心计算逻辑是获取 DOM 变化最大时对应的时间，代码如下所示。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("```js\ncalFinallScore() {\n    try {\n      if (this.sendMark) return;\n      const time = Date.now() - performance.timing.fetchStart;\n      var isCheckFmp = time > 30000 || SCORE_ITEMS && SCORE_ITEMS.length > 4 && time - (SCORE_ITEMS && SCORE_ITEMS.length && SCORE_ITEMS[SCORE_ITEMS.length - 1].t || 0) > 2 * CHECK_INTERVAL || (SCORE_ITEMS.length > 10 && window.performance.timing.loadEventEnd !== 0 && SCORE_ITEMS[SCORE_ITEMS.length - 1].score === SCORE_ITEMS[SCORE_ITEMS.length - 9].score);\n      if (this.observer && isCheckFmp) {\n        this.observer.disconnect();\n        window.SCORE_ITEMS_CHART = JSON.parse(JSON.stringify(SCORE_ITEMS));\n        let fmps = getFmp(SCORE_ITEMS);\n        let record = null\n        for (let o = 1; o < fmps.length; o++) {\n          if (fmps[o].t >= fmps[o - 1].t) {\n            let l = fmps[o].score - fmps[o - 1].score;\n            (!record || record.rate <= l) && (record = {\n              t: fmps[o].t,\n              rate: l\n            });\n          }\n        }\n        //\n        this.fmp = record && record.t || 30001;\n        try {\n          this.checkImgs(document.body)\n          let max = Math.max(...this.imgs.map(element => {\n            if(/^(\\/\\/)/.test(element)) element = 'https:' + element;\n            try {\n              return performance.getEntriesByName(element)[0].responseEnd || 0\n            } catch (error) {\n              return 0\n            }\n          }))\n          record && record.t > 0 && record.t < 36e5 ? this.setPerformance({\n            fmpImg: parseInt(Math.max(record.t , max))\n          }) : this.setPerformance({});\n        } catch (error) {\n          this.setPerformance({});\n          // console.error(error)\n        }\n      } else {\n        setTimeout(() => {\n          this.calFinallScore();\n        }, CHECK_INTERVAL);\n      }\n    } catch (error) {\n    }\n\n  }\n```\n")])])]),n("p",[e._v("这个就是首屏计算的部分流程。")]),e._v(" "),n("p",[e._v("看完前面的流程，不知道你有没有这样的疑问：如果页面里包含图片，使用上面的首屏指标采集方案，结果准确吗？")]),e._v(" "),n("p",[e._v("结论是：不准确。上述计算逻辑主要是针对 DOM 元素来做的，图片加载过程是异步，图片容器（图片的 DOM 元素）和内容的加载是分开的，当容器加载出来时，内容还没出来，一定要确保内容加载出来，才算首屏。")]),e._v(" "),n("p",[e._v("这就需要增加一些策略了，以下是包含图片页面的首屏计算 demo。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('```html\n<!doctype html><body><img id="imgTest" src="https://www.baidu.com/img/bd_logo1.png?where=super">\n  <img id="imgTest" src="https://www.baidu.com/img/bd_logo1.png?where=super">\n  <style type=text/css>\n    background-image:url(\'https://www.baidu.com/img/dong_8f1d47bcb77d74a1e029d8cbb3b33854.gif);\n  </style>\n  </body>\n  <html>\n<script type="text/javascript">\n(() => {\n  const imgs = []\n  const getImageDomSrc = {\n    _getImgSrcFromBgImg: function (bgImg) {\n      var imgSrc;\n      var matches = bgImg.match(/url\\(.*?\\)/g);\n      if (matches && matches.length) {\n        var urlStr = matches[matches.length - 1];\n        var innerUrl = urlStr.replace(/^url\\([\\\'\\"]?/, \'\').replace(/[\\\'\\"]?\\)$/, \'\');\n        if (((/^http/.test(innerUrl) || /^\\/\\//.test(innerUrl)))) {\n          imgSrc = innerUrl;\n        }\n      }\n      return imgSrc;\n    },\n    getImgSrcFromDom: function (dom, imgFilter) {\n      if (!(dom.getBoundingClientRect && dom.getBoundingClientRect().top < window.innerHeight))\n        return false;\n      imgFilter = [/(\\.)(png|jpg|jpeg|gif|webp|ico|bmp|tiff|svg)/i]\n      var src;\n      if (dom.nodeName.toUpperCase() == \'IMG\') {\n        src = dom.getAttribute(\'src\');\n      } else {\n        var computedStyle = window.getComputedStyle(dom);\n        var bgImg = computedStyle.getPropertyValue(\'background-image\') || computedStyle.getPropertyValue(\'background\');\n        var tempSrc = this._getImgSrcFromBgImg(bgImg, imgFilter);\n        if (tempSrc && this._isImg(tempSrc, imgFilter)) {\n          src = tempSrc;\n        }\n      }\n      return src;\n    },\n    _isImg: function (src, imgFilter) {\n      for (var i = 0, len = imgFilter.length; i < len; i++) {\n        if (imgFilter[i].test(src)) {\n          return true;\n        }\n      }\n      return false;\n    },\n    traverse(e) {\n      var _this = this\n        , tName = e.tagName;\n      if ("SCRIPT" !== tName && "STYLE" !== tName && "META" !== tName && "HEAD" !== tName) {\n        var el = this.getImgSrcFromDom(e)\n        if (el && !imgs.includes(el))\n          imgs.push(el)\n        var len = e.children ? e.children.length : 0;\n        if (len > 0)\n          for (var child = e.children, _len = len - 1; _len >= 0; _len--)\n            _this.traverse(child[_len]);\n      }\n    }\n  }\n  getImageDomSrc.traverse(document.body);\n  window.onload=function(){\n  var max = Math.max(...imgs.map(element => {\n    if (/^(\\/\\/)/.test(element))\n      element = \'https:\' + element;\n    try {\n      return performance.getEntriesByName(element)[0].responseEnd || 0\n    } catch (error) {\n      return 0\n    }\n  }\n  ))\n  console.log(max);\n  }\n}\n)()\n<\/script>\n```\n')])])]),n("p",[e._v("它的计算逻辑是这样的。")]),e._v(" "),n("p",[e._v("首先，获取页面所有的图片路径。在这里，图片类型分两种，一种是带 IMG 标签的，一种是带 "),n("code",[e._v("DIV")]),e._v(" 标签的。前者可以直接通过 src 值得到图片路径，后者可以使用 "),n("code",[e._v("window.getComputedStyle(dom)")]),e._v(" 方式获取它的样式集合。")]),e._v(" "),n("p",[e._v("接下来，通过正则获取图片的路径即可。")]),e._v(" "),n("p",[e._v("然后通过 "),n("code",[e._v("performance.getEntriesByName(element)[0].responseEnd")]),e._v(" 的方式获取到对应图片路径的下载时间，最后与使用 "),n("code",[e._v("MutationObserver")]),e._v(" 获得的 "),n("code",[e._v("DOM")]),e._v(" 首屏时间相比较，哪个更长，哪个就是最终的首屏时间。")]),e._v(" "),n("p",[e._v("以上就是首屏采集的完整流程。")]),e._v(" "),n("h3",{attrs:{id:"小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),n("p",[n("img",{attrs:{src:"/performance/Indicator_collection.png",alt:"Indicator_collection"}})]),e._v(" "),n("p",[e._v("这一讲我主要介绍了首屏指标采集相关的内容。不知道你看完后有没有这样的疑惑：")]),e._v(" "),n("p",[e._v("这种性能采集方案靠谱吗？\n目前一线大厂有谁在使用这种采集方案？\n采集过程中会不会有什么坑？")]),e._v(" "),n("p",[e._v("目前来说，这是市面中最好的首屏指标采集方案，它兼容了单页面应用和服务端模板的页面。我们反复做了几个月的数据实验，并借助它完成了一个全公司的性能优化项目，用实验和实践结果证明这种方案的靠谱程度。")]),e._v(" "),n("p",[e._v("第二个问题，一线大厂里，阿里云、淘宝、阿里飞猪、得到 App、微店等公司都广泛在使用这个方案。")]),e._v(" "),n("p",[e._v("最后一个问题，首屏指标采集中会不会有坑。实践中确实有不少的坑。比如，一个单页面应用，我们需要采集它的首屏时间，当我们采集首页的首屏指标时，用户恰好输入了一些东西导致页面跳转到了搜索结果页。此时首屏采集脚本继续在执行，那最终统计的就是搜索结果页的首屏数据而不是首页的")]),e._v(" "),n("p",[e._v("类似这种问题，你想过怎么解决吗？欢迎在评论区和我留言进行交流。")]),e._v(" "),n("p",[e._v("上面就是首屏指标采集和优化手段相关的内容，接下来看看其他的指标如何采集。")]),e._v(" "),n("p",[e._v("源码地址：https://github.com/lagoueduCol/WebPerformanceOptimization-xifeng")]),e._v(" "),n("h2",{attrs:{id:"白屏指标采集"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#白屏指标采集"}},[e._v("#")]),e._v(" 白屏指标采集")]),e._v(" "),n("p",[e._v("白屏时间是指从输入内容回车（包括刷新、跳转等方式）后，到页面开始出现第一个字符的时间。白屏时间的长短会影响用户对 App 或站点的第一印象。")]),e._v(" "),n("p",[e._v("白屏指标怎么采集呢？我们先来回顾一下前面讲过的浏览器的页面加载过程：")]),e._v(" "),n("p",[e._v("客户端发起请求 -> 下载 HTML 及 JS/CSS 资源 -> 解析 JS 执行 -> JS 请求数据 -> 客户端解析 DOM 并渲染 -> 下载渲染图片-> 完成渲整体染。")]),e._v(" "),n("p",[e._v("在这个过程中，客户端解析 DOM 并渲染之前的时间，都算白屏时间。所以，白屏时间的采集思路如下：白屏时间 = 页面开始展示时间点 - 开始请求时间点。如果你是借助浏览器的 "),n("code",[e._v("Performance API")]),e._v(" 工具来采集，那么可以使用公式：白屏时间 "),n("code",[e._v("FP = domLoading - navigationStart")]),e._v("。")]),e._v(" "),n("p",[e._v("这是浏览器页面加载过程，如果放在 App场景下，就不太一样了，App下的页面加载过程：")]),e._v(" "),n("p",[e._v("初始化 "),n("code",[e._v("WebView")]),e._v(" -> 客户端发起请求 -> 下载 HTML 及 JS/CSS 资源 -> 解析 JS 执行 -> JS 请求数据 -> 服务端处理并返回数据 -> 客户端解析 DOM 并渲染 -> 下载渲染图片 -> 完成整体渲染。")]),e._v(" "),n("p",[e._v("App下的白屏时间，多了启动浏览器内核，也就是 "),n("code",[e._v("Webview")]),e._v(" 初始化的时间。这个时间必须通过手动采集的方式来获得，而且因为线上线下时间差别不大，线下采集即可。具体来说，在 App 测试版本中，程序在 App 创建 "),n("code",[e._v("WebView")]),e._v(" 时打一个点，然后在开始建立网络连接打一个点，这两个点的时间差就是 "),n("code",[e._v("Webview")]),e._v(" 初始化的时间。")]),e._v(" "),n("h2",{attrs:{id:"卡顿指标采集"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#卡顿指标采集"}},[e._v("#")]),e._v(" 卡顿指标采集")]),e._v(" "),n("p",[e._v("所谓卡顿，简单来说就是页面出现卡住了的不流畅的情况。 提到它的指标，你是不是会一下就想到 FPS（"),n("code",[e._v("Frames Per Second")]),e._v("，每秒显示帧数）？FPS 多少算卡顿？网上有很多资料，大多提到 FPS 在 60 以上，页面流畅，不卡顿。但事实上并非如此，比如我们看电影或者动画时，素虽然 FPS 是 30 （低于60），但我们觉得很流畅，并不卡顿。")]),e._v(" "),n("p",[e._v("FPS 低于 60 并不意味着卡顿，那 FPS 高于 60 是否意味着一定不卡顿呢？比如前 60 帧渲染很快（10ms 渲染 1 帧），后面的 3 帧渲染很慢（ 20ms 渲染 1 帧），这样平均起来 FPS 为95，高于 60 的标准。这种情况会不会卡顿呢？实际效果是卡顿的。因为卡顿与否的关键点在于单帧渲染耗时是否过长。")]),e._v(" "),n("p",[e._v("但难点在于，在浏览器上，我们没办法拿到单帧渲染耗时的接口，所以这时候，只能拿 FPS 来计算，只要 FPS 保持稳定，且值比较低，就没问题。它的标准是多少呢？连续 3 帧不低于 20 FPS，且保持恒定。")]),e._v(" "),n("p",[e._v("以 H5 为例，H5 场景下获取 FPS 方案如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("``` js\n  var fps_compatibility= function () {\n      return (\n          window.requestAnimationFrame ||\n          window.webkitRequestAnimationFrame ||\n          function (callback) {\n              window.setTimeout(callback, 1000 / 60);\n          }\n      );\n  }();\n  var fps_config={\n    lastTime:performance.now(),\n    lastFameTime : performance.now(),\n    frame:0\n  }\n  var fps_loop = function() {\n      var _first =  performance.now(),_diff = (_first - fps_config.lastFameTime);\n      fps_config.lastFameTime = _first;\n      var fps = Math.round(1000/_diff);\n      fps_config.frame++;\n      if (_first > 1000 + fps_config.lastTime) {\n          var fps = Math.round( ( fps_config.frame * 1000 ) / ( _first - fps_config.lastTime ) );\n          console.log(`time: ${new Date()} fps is：`, fps);\n          fps_config.frame = 0;\n          fps_config.lastTime = _first ;\n      };\n      fps_compatibility(fps_loop);\n  }\n  fps_loop();\n  function isBlocking(fpsList, below=20, last=3) {\n    var count = 0\n    for(var i = 0; i < fpsList.length; i++) {\n      if (fpsList[i] && fpsList[i] < below) {\n        count++;\n      } else {\n        count = 0\n      }\n      if (count >= last) {\n        return true\n      }\n    }\n    return false\n  }\n```\n")])])]),n("p",[e._v("利用 "),n("code",[e._v("requestAnimationFrame")]),e._v(" 在一秒内执行 60 次（在不卡顿的情况下）这一点，假设页面加载用时 X ms，这期间 "),n("code",[e._v("requestAnimationFrame")]),e._v(" 执行了 N 次，则帧率为1000* N/X，也就是FPS。")]),e._v(" "),n("p",[e._v("由于用户客户端差异很大，我们要考虑兼容性，在这里我们定义 "),n("code",[e._v("fps_compatibility")]),e._v(" 表示兼容性方面的处理，在浏览器不支持 "),n("code",[e._v("requestAnimationFrame")]),e._v(" 时，利用 "),n("code",[e._v("setTimeout")]),e._v(" 来模拟实现，在 "),n("code",[e._v("fps_loop")]),e._v(" 里面完成 FPS 的计算，最终通过遍历 fpsList 来判断是否连续三次 fps 小于20。")]),e._v(" "),n("p",[e._v("如果连续判断 3次 FPS 都小于20，就认为是卡顿。")]),e._v(" "),n("p",[e._v("那么，在 App 侧，怎么采集卡顿指标呢？")]),e._v(" "),n("p",[e._v("App 侧可以拿到单帧渲染时长，直接让 App 取到单帧渲染时长，如果在 Android 环境下，可以直接取到单帧渲染时长。代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("``` java\n  private void calculateLag(long frameTimeNanos){\n  /*final long frameTimeNanos = mChoreographer.getFrameTimeNanos();*/\n  mLastFrameTimeNanos = System.nanoTime();\n      if (mLastFrameTimeNanos != 0) {\n          long costTime= (frameTimeNanos - mLastFrameTimeNanos)/ 1000000.0F;//计算成毫秒\n          //严重卡顿，单帧超过250ms\n          if (costTime>= bigJankTime) {\n              bJank = true;\n          } else if (costTime>= criticalBlockTime) {//超过50ms\n                  mCriticalBlockCount++;\n          } else {\n              if (bJank) {\n                  //严重卡顿上报逻辑\n              } else if (mCriticalBlockCount >= cStuckThreshold) {\n                  //卡顿上报逻辑，5次50ms\n              }\n          }\n      }\n      mLastFrameTimeNanos = frameTimeNanos;\n  }\n```\n")])])]),n("p",[e._v("通过 "),n("code",[e._v("mChoreographer.getFrameTimeNanos")]),e._v(" 和 "),n("code",[e._v("System.nanoTime")]),e._v(" 计算出单帧渲染时长，如果单帧渲染时长超过 250ms，则严重卡断，反之连续 5 次超过 50ms，判定为卡顿。")]),e._v(" "),n("p",[e._v("如果是 iOS 场景，要复杂一些，需要借助 CFRunLoop 来取到单帧渲染时长（CFRunLoop，它负责监听输入源，并调度处理）。代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("```java\n  static void runLoopObserverCallBack(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void *info)\n  {\n      MyClass *object = (__bridge MyClass*)info;\n      // 记录状态值\n      object->activity = activity;\n      // 发送信号\n      dispatch_semaphore_t semaphore = moniotr->semaphore;\n      dispatch_semaphore_signal(semaphore);\n  }\n  - (void)registerObserver\n  {\n      CFRunLoopObserverContext context = {0,(__bridge void*)self,NULL,NULL};\n      CFRunLoopObserverRef observer = CFRunLoopObserverCreate(kCFAllocatorDefault,kCFRunLoopAllActivities,YES,0,&runLoopObserverCallBack,&context);\n      CFRunLoopAddObserver(CFRunLoopGetMain(), observer, kCFRunLoopCommonModes);\n      // 创建信号\n      semaphore = dispatch_semaphore_create(0);\n      // 在子线程监控时长\n      dispatch_async(dispatch_get_global_queue(0, 0), ^{\n          while (YES)\n          {\n              // 假定连续5次超时50ms认为卡顿(当然也包含了单次超时250ms)\n              long st = dispatch_semaphore_wait(semaphore, dispatch_time(DISPATCH_TIME_NOW, 50*NSEC_PER_MSEC));\n              if (st != 0)\n              {\n                  if (activity==kCFRunLoopBeforeSources || activity==kCFRunLoopAfterWaiting)\n                  {\n                      if (++timeoutCount < 5)\n                          continue;\n                      // 检测到卡顿，进行卡顿上报\n                  }\n              }\n              timeoutCount = 0;\n          }\n      });\n  }\n```\n")])])]),n("p",[e._v("通过 "),n("code",[e._v("CFRunLoopObserverContext")]),e._v(" 将休眠、唤醒的状态通知 "),n("code",[e._v("Observer")]),e._v("，然后通过 "),n("code",[e._v("dispatch_async")]),e._v(" 在子线程时监控节点之间的时间，来计算主线程的时长。")]),e._v(" "),n("p",[e._v("这里监控主线程是否卡顿这块儿，借鉴了导航 App 对交通堵塞问题的判断逻辑。")]),e._v(" "),n("p",[e._v("导航 App 无法判断某个地点是否出了问题，如车坏在当路，正在施工，或者发生事故剐蹭了这些，但可以借助 GPS 和定位仪，拿到你两个节点之间的行驶速度，就可以推断出这个地点是否拥堵。这里的监控思路也正是如此，使用状态"),n("code",[e._v("kCFRunLoopBeforeSources")]),e._v(" 和 "),n("code",[e._v("kCFRunLoopAfterWaiting")]),e._v(" 两个节点之间的运行时间，和某个阈值（250ms）做比较，根据比较结果判定主线程是否出现卡顿。")]),e._v(" "),n("p",[e._v("为什么会出现 App 白屏时间过长或卡顿问题呢？一般 WebView 初始化慢、DNS 解析慢、视图树过于复杂和主线程被阻塞等都会导致问题出现，但很多情况下白屏时间和卡顿都和网络环境有关。为了保证页面顺畅，我们需要做一些服务降级处理，比如对电商网站来说，高清图可以用文本代替，仅展示购买按钮和价格等核心内容。而要实现这个功能，就必须先做好网络环境采集。")]),e._v(" "),n("h2",{attrs:{id:"网络环境采集"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#网络环境采集"}},[e._v("#")]),e._v(" 网络环境采集")]),e._v(" "),n("p",[e._v("为什么不能直接拿到网络环境数据呢？如果在 App 内， 我们可以通过 App 提供的接口获取到网络情况，但在端外（App 外部环境，比如微信里面的页面，或者PC站、手机浏览器下的页面）我们就没法直接拿到当前网络情况了。这时怎么办呢？")]),e._v(" "),n("p",[e._v("一个做法是拿到两张不同尺寸图片的加载时间，通过计算结果来判定当前网络环境。")]),e._v(" "),n("p",[e._v("具体来说，我们在每次页面加载时，通过客户端向服务端发送图片请求，比如，请求一张 11 像素的图片和一张 33 像素的图片，然后在图片请求之初打一个时间点，在图片 onLoad 完成后打一个时间点，两个时间点之差，就是图片的加载时间。")]),e._v(" "),n("p",[e._v("接着，我们用文件体积除以加载时间，就能得出两张图片的加载速度，然后把两张图片的加载速度求平均值，这个结果就可以当作网络速度了。")]),e._v(" "),n("p",[e._v("因为每个单页面启动时，都会做一次网速采集，得到一个网络速度，我们可以把这些网络速度做概率分布，就能得出当前网络情况是 2G （750-1400ms）、3G （230-750ms）、4G或者WiFi（0-230ms）。")]),e._v(" "),n("p",[e._v("下面这张图是 2016 年我在做移动端 M 站性能优化项目时，做的图片测速结果分布。横坐标是速度，纵坐标是网速在分布中的分位值，最左侧是 wifi网络，中间是 3G 网络，最右侧是 2G 网络。")]),e._v(" "),n("p",[n("img",{attrs:{src:"/performance/Indicator_1.png",alt:"Indicator_collection"}})]),e._v(" "),n("p",[e._v("图片测速结果分布")]),e._v(" "),n("p",[e._v("根据这张图，你会发现自己的用户都停留在什么网段。比如，我在 2016 年发现，58 同城的用户测速分布，50% 的用户停留在 2G 水平。知道了这点，我们后续针对的优化手段就会更多侧重 2G 下的网络优化方案了。")]),e._v(" "),n("h3",{attrs:{id:"小结-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结-2"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),n("p",[n("img",{attrs:{src:"/performance/Indicator_2.png",alt:"Indicator_collection"}})]),e._v(" "),n("p",[e._v("前面我们详细讲了白屏时间采集、卡顿指标采集和网络环境采集，有了这个采集，我们就能很容易定位用户体验层的很多问题，比如加载感受、交互感受和弱网下的服务降级处理，等等。")]),e._v(" "),n("p",[e._v("在白屏部分，里面提到的更偏加载阶段的白屏，实际工作中我们会遇到不少广义上的白屏，比如后端接口异常导致的白屏，数据加载中产生的白屏，甚至还有图片与视频加载过程或等待过程中的白屏。")]),e._v(" "),n("p",[e._v("源码地址：https://github.com/lagoueduCol/WebPerformanceOptimization-xifeng/tree/master/chapter5")]),e._v(" "),n("h2",{attrs:{id:"性能-sdk-设计"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#性能-sdk-设计"}},[e._v("#")]),e._v(" 性能 SDK 设计")]),e._v(" "),n("p",[e._v("SDK 是指开发者为特定的软件、平台、操作系统提供的开发工具集，比如，微信为小程序提供的微信 JS-SDK。")]),e._v(" "),n("p",[e._v("不过，在本讲，我主要介绍性能 SDK，即为公司各个产品业务提供性能统计的 JS SDK。它包括 API 接口、工程引入、文档平台、开发调试工具，主要是将性能采集代码和上报策略封装在一起，通过采集首屏、白屏等指标数据，然后上报到性能平台后端进行处理。")]),e._v(" "),n("p",[e._v("由于性能 SDK 最终是给各个业务使用的，所以它的设计要满足在接入性能监控平台时，简单易用和运行平稳高效，这两个要求。")]),e._v(" "),n("h3",{attrs:{id:"sdk-接入设计"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sdk-接入设计"}},[e._v("#")]),e._v(" SDK 接入设计")]),e._v(" "),n("p",[e._v("要保证 SDK 接入简单，容易使用，首先要把之前首屏、白屏和卡顿采集的脚本封装在一起，并让脚本自动初始化和运行。")]),e._v(" "),n("p",[n("img",{attrs:{src:"/performance/Indicator_3.png",alt:"Indicator_collection"}})]),e._v(" "),n("h3",{attrs:{id:"性能-sdk-相关-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#性能-sdk-相关-api"}},[e._v("#")]),e._v(" 性能 SDK 相关 API")]),e._v(" "),n("p",[e._v("具体来说，首屏采集的分数计算部分 API（calculateScore）、变化率计算的 API（calFinallScore）和首屏图片时间计算 API（fmpImg）可以一起封装成 FMP API。其中首屏图片计算 API 因为比较独立，可以专门抽离成一个 util，供其他地方调用。白屏和卡顿采集也类似，可以封装成 FP API 和 BLOCK API。")]),e._v(" "),n("p",[e._v("还有一个 ExtensionAPI 接口，用来封装一些后续需要使用的数据，比如加载瀑布流相关的数据（将首屏时间细分为DNS、TCP连接等时间），这些数据可以通过浏览器提供的 performance 接口获得。")]),e._v(" "),n("p",[e._v("为了进行首屏、白屏、卡顿的指标采集，我们可以封装 Perf API，调用 FMP、FP、BLOCK、ExtensionAPI 四个 API 来完成。因为是调用 window.performance 接口，所以先做环境兼容性的判断，即看看浏览器是否支持 window.performance。")]),e._v(" "),n("p",[e._v("最终我们接入时只要安装一个 npm 包，然后初始化即可，具体代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("```js\n  npm install @common/Perf -S;\n  import { perfInit } from '@common';\n  perfInit ();\n  或者以外链的形式接入：\n\n  <script type=\"text/javascript\">https://s1.static.com/common/perf/static/js/1.0.0/perf.min.js<\/script>\n  try {\n    perfInit ();\n  } catch (err) {\n    console.warn(err);\n  }\n```\n")])])]),n("p",[e._v("除了性能 SDK 自身的方案设计之外，提供帮助文档（如示例代码、 QA 列表等），也可以提高性能 SDK 的易用性。")]),e._v(" "),n("p",[e._v("具体来说，我们可以搭建一个简单的性能 SDK 网站，进入站点后，前端工程师可以看到使用文档，包括各种平台下如何接入，接入的示例代码是怎样的，接入性能 SDK 后去哪个 URL 看数据，遇到异常问题时怎么调试，等等。")]),e._v(" "),n("p",[e._v("另外，还可以设置性能分析小助手，快速定位一些基础问题。这个小助手怎么实现呢？我们在SDK 中通过检测访问页面的 URL 是不是加了调试参数（PERF_DEV_MODEL=PERF_DEV_MODEL），如果访问的页面 URL 中加了调试参数，打开页面后就可以看到一个性能分析小助手的圆形图标。通过它，前端工程师可以快速进入诊断模式，定位一些基础问题，如性能 SDK 初始化失败，采集数据异常，发送的请求参数不正确等问题。")]),e._v(" "),n("p",[e._v("但有时候前端工程师在接入时也会遇到帮助文档里也没有提供解决办法的问题。这时怎么办呢？可以借助代码存放的 Gitlab 平台，让前端工程师通过 issue 的方式提交问题，看到问题后我们及时回复解决。如果问题很紧急，也可以通过平台上的联系方式联系开发者，开发者解决完问题后，发布代码并通知前端工程师。")]),e._v(" "),n("h3",{attrs:{id:"sdk-运行设计"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sdk-运行设计"}},[e._v("#")]),e._v(" SDK 运行设计")]),e._v(" "),n("p",[e._v("SDK 如果想运行高效，必须有好的兼容性策略、容错机制和测试方案。")]),e._v(" "),n("p",[e._v("所谓兼容性策略，就是性能 SDK 可以在各个业务下都可以稳定运行。")]),e._v(" "),n("p",[e._v("我们知道，前端性能优化会面临的业务场景大致有：")]),e._v(" "),n("p",[e._v("各类页面，如平台型页面、3C 类页面、中后台页面；")]),e._v(" "),n("p",[e._v("一些可视化搭建的平台，如用于搭建天猫双十一会场页这种用于交易运行页面的魔方系统；")]),e._v(" "),n("p",[e._v("各个终端，如 PC 端，移动端，小程序端等。")]),e._v(" "),n("p",[e._v("这就要求性能 SDK 要能适应这些业务，及时采集性能指标并进行上报。那具体怎么做呢？")]),e._v(" "),n("p",[e._v("一般不同页面和终端，它们的技术栈也会不同，如 PC端页面使用 React，移动端页面使用 VUE 。这个时候，我们可以尽可能用原生 JavaScript 去做性能指标的采集，从而实现跨不同技术栈的采集。")]),e._v(" "),n("p",[e._v("不同终端方面，我设计了一个适配层来抹平采集方面的差异。具体来说，小程序端可以用有自己的采集 API，如 minaFMP，其他端可以直接用 FMP，这样在性能 SDK 初始化时，根据当前终端类型的不同，去调用各自的性能指标采集 API。")]),e._v(" "),n("p",[e._v("容错方面怎么做呢？")]),e._v(" "),n("p",[e._v("如果是性能 SDK 自身的报错，可以通过 try catch 的方式捕获到，然后上报异常监控平台。注意，不要因为 SDK 的报错而影响引入性能 SDK 页面的正常运行。")]),e._v(" "),n("p",[e._v("除此之外，好的自测和 QA 的测试也是性能 SDK 运行平稳的一大保障。")]),e._v(" "),n("p",[e._v("在开发 SDK 时，我们可以根据用户实际的浏览器和机型分布比例，确定 top10% 用户的机型和浏览器类型。然后在每次开发完成并进行代码 review 后，使用这些机型和浏览器类型进行自测。")]),e._v(" "),n("p",[e._v("另外，在升级性能 SDK 时，不论功能大小，为了保证不影响到所有业务方线上稳定运行，最好都进行一次冒烟测试用例。")]),e._v(" "),n("h3",{attrs:{id:"上报策略设计"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#上报策略设计"}},[e._v("#")]),e._v(" 上报策略设计")]),e._v(" "),n("p",[e._v("上报策略是指在性能指标采集完成后，上报到性能平台所采用的具体策略。比如通过 SDK 上报到性能平台后端，是数据直接上传还是做一些过滤处理，是全量上传数据还是抽样，是选择 H5 接口上报还是 native 接口上报，等等，这些都需要我们确定一下。")]),e._v(" "),n("h3",{attrs:{id:"日志数据过滤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#日志数据过滤"}},[e._v("#")]),e._v(" 日志数据过滤")]),e._v(" "),n("p",[e._v("我的建议是，在采集性能指标之后，最好先对异常数据进行过滤。")]),e._v(" "),n("p",[e._v("异常数据分一般有两类，第一类是计算错误导致的异常数据，比如负值或者非数值数据，第二类是合法异常值、极大值、极小值，属于网络断掉或者超时形成的数值，比如 15s 以上的首屏时间。")]),e._v(" "),n("p",[e._v("负值的性能指标数据影响很大，它会严重拖低首屏时间，也会把计算逻辑导致负值的问题给掩盖掉。")]),e._v(" "),n("p",[e._v("还有首屏时间是非数值数据的时候也非常麻烦，比如首屏时间是 “200”，我这里使用引号是因为它是字符串类型，在采集过程中计算时，遇到加法时，会出现 “200”+30=20030，而不是你预期的 230 的情况。后来遇到负值数据和非数值数据后，我都会用程序打印日志记录，并上报到错误异常平台。")]),e._v(" "),n("h3",{attrs:{id:"数据抽样策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据抽样策略"}},[e._v("#")]),e._v(" 数据抽样策略")]),e._v(" "),n("p",[e._v("性能 SDK 上报数据是全量还是抽象，需要根据本身 App 或者网站的日活来确定，如果日活10万以下，那抽样就没必要了。如果是一款日活千万的 App，那就需要进行数据抽样了，因为如果上报全量日志的话，会耗费大量用户的流量和请求带宽。")]),e._v(" "),n("p",[e._v("像 58 同城，我们做的就是 10% 的抽样率，这也有百万级的数据了。除了在 SDK 里面设置抽样策略，业界还有通过服务器端下发数据抽样率的方式，来动态控制客户端向服务器端上报性能数据的量。比如，双十二运营活动当天，日活跃用户激增，抽样率由10%降低到5%，可以大大降低运营活动时统计服务器的负载。")]),e._v(" "),n("h3",{attrs:{id:"上报机制选择"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#上报机制选择"}},[e._v("#")]),e._v(" 上报机制选择")]),e._v(" "),n("p",[e._v("一般，为了节省流量，性能 SDK 也会根据网络能力，选择合适的上报机制。在强网环境（如 4G/WIFI），直接进行上报；在弱网（2G/3G）下，将日志存储到本地，延时到强网下再上报。")]),e._v(" "),n("p",[e._v("除了网络能力，我们还可以让 SDK 根据 App 忙碌状态，选择合适的上报策略。如果 App 处于空闲状态，直接上报；如果处于忙碌状态，等到闲时（比如凌晨 2-3 点）再进行上报。")]),e._v(" "),n("p",[e._v("除此之外，还有一些其他的策略，如批量数据上报，默认消息数量达到 30 条才上报，或者只在 App 启动时上报等策略，等等。你可以根据实际情况进行选择。")]),e._v(" "),n("p",[e._v("在上报能力选择方面，由于使用 native 接口上报时，SDK 可以复用客户端的请求连接，采取延时上报或者批量上报等策略。所以虽然我们支持 H5 和 native 两种接口上报方式，但实际工作中建议优先使用 native 接口进行数据上报。")]),e._v(" "),n("p",[e._v("在性能指标上报之前，也就是请求指标转换为请求参数环节，SDK 内部最好做一次参数校验处理。")]),e._v(" "),n("h3",{attrs:{id:"小结-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结-3"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),n("p",[n("img",{attrs:{src:"/performance/Indicator_4.png",alt:"Indicator_collection"}})])])}),[],!1,null,null,null);n.default=a.exports}}]);