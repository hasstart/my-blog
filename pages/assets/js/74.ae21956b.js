(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{499:function(e,t,a){"use strict";a.r(t);var s=a(15),l=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"i-o处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i-o处理"}},[e._v("#")]),e._v(" I/O处理")]),e._v(" "),a("ul",[a("li",[e._v("V8引擎单线程无法同时干两件事")]),e._v(" "),a("li",[e._v("文件读取.网络IO缓慢且具有不确定性")]),e._v(" "),a("li",[e._v("通过异步回调方式处理又称为异步IO")]),e._v(" "),a("li",[e._v("先同步在异步,异步放入队列等同步完成后在执行,每次村换叫一个tick")])]),e._v(" "),a("h3",{attrs:{id:"浏览器的event-loop是在html5中定义的规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的event-loop是在html5中定义的规范"}},[e._v("#")]),e._v(" 浏览器的Event loop是在HTML5中定义的规范")]),e._v(" "),a("p",[e._v("浏览器中的Event loop\n浏览器的任务队列分为宏任务和微任务")]),e._v(" "),a("ul",[a("li",[e._v("宏任务：setTimeout, setInterval, setImmediate， I/O，原生事件回调函数，MessageChannel、postMessage等。")]),e._v(" "),a("li",[e._v("微任务：process.nextTick, 原生Promise(有些实现的promise将then方法放到了宏任务中),Object.observe(已废弃), MutationObserver等。\n那么浏览器中的任务执行顺序是怎么样的呢？")])]),e._v(" "),a("ol",[a("li",[e._v("浏览器中，先执行当前栈，执行完主执行线程中的任务。")]),e._v(" "),a("li",[e._v("取出Microtask微任务队列中任务执行直到清空。")]),e._v(" "),a("li",[e._v("取出Macrotask宏任务中 一个 任务执行。")]),e._v(" "),a("li",[e._v("检查Microtask微任务中有没有任务，如果有任务执行直到清空。")]),e._v(" "),a("li",[e._v("重复3和4。\n整个的这种运行机制又称为Event Loop(事件循环)")])]),e._v(" "),a("h3",{attrs:{id:"而node中则由libuv库实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#而node中则由libuv库实现"}},[e._v("#")]),e._v(" 而node中则由libuv库实现")]),e._v(" "),a("ul",[a("li",[e._v("在libuv内部有这样一个事件环机制。在node启动时会初始化事件环。")]),e._v(" "),a("li",[e._v("node中的event loop分为6个阶段，不同于浏览器的是，这里每一个阶段都对应一个事件队列，node会在当前阶段中的全部任务执行完，清空NextTick Queue，清空    Microtask Queue，再执行下一阶段。")]),e._v(" "),a("li",[e._v("在node.js里，process 对象代表node.js应用程序，可以获取应用程序的用户，运行环境等各种信息。process.nextTick()方法将 callback 添加到next tick 队列，并且nextTick优先级比promise等microtask高。")])]),e._v(" "),a("ol",[a("li",[e._v("timers：执行setTimeout() 和 setInterval()中到期的callback。")]),e._v(" "),a("li",[e._v("I/O callbacks：上一轮循环中有少数的I/Ocallback会被延迟到这一轮的")]),e._v(" "),a("li",[e._v("这一阶段执行 idle, prepare：队列的移动，仅内部使用")]),e._v(" "),a("li",[e._v("poll：最为重要的阶段，执行I/O callback，在适当的条件下会阻塞在这个阶段")]),e._v(" "),a("li",[e._v("check：执行setImmediate的callback")]),e._v(" "),a("li",[e._v('close callbacks：执行close事件的callback，例如socket.on("close",func)')])]),e._v(" "),a("h4",{attrs:{id:"promisify-转成promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promisify-转成promise"}},[e._v("#")]),e._v(" promisify 转成promise")]),e._v(" "),a("h4",{attrs:{id:"buffer-处理二进制流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#buffer-处理二进制流"}},[e._v("#")]),e._v(" buffer 处理二进制流")]),e._v(" "),a("h4",{attrs:{id:"http-服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-服务"}},[e._v("#")]),e._v(" http 服务")]),e._v(" "),a("h4",{attrs:{id:"手写一个cli"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手写一个cli"}},[e._v("#")]),e._v(" 手写一个cli")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("模板下载 > clone 模板  > cd name > npm install > npm run dev")])]),e._v(" "),a("li",[a("p",[e._v("约定路由 > read file (page/view) > 导入router模板 > 写入到index.js")])]),e._v(" "),a("li",[a("p",[e._v("commander  发布(sh)")])])])])}),[],!1,null,null,null);t.default=l.exports}}]);